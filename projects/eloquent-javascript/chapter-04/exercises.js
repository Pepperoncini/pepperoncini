////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1) {
let arr = [];
  if (start === end) {
    return arr;
    }
  else if (start < end && step < 0) {
    return arr;
   }
  else if (start > end && step > 0) {
    return arr;
    }
  else {
    if (start < end) {
      for (let i = start; i <= end; i += step) {
       arr.push(i);
      }
    }
else {
  for (let i = start; i >= end; i += step) {
  arr.push(i);
      }
   }
  }
return arr;
}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(range) {
let total = 0;
for (let i = 0; i < range.length; i++) {
  total += range[i];
}
return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  var reverse = [];
  for (let i = arr.length - 1; i >= 0; i--) {
    reverse.push(arr[i]);
  }
  return reverse;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
 
for (let i = 0; i < Math.floor(arr.length / 2); i++) {
 let hold = arr[i];
 arr[i] = arr[arr.length - 1 - i];
 arr[arr.length - 1 - i] = hold;
}
return arr;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  var list = null; 
  //loop over the array and make a new object attached to the rest key
  for (let i = arr.length - 1; i >= 0; i--) {
    list = {value: arr[i], rest: list};
    
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
 var arr = [];
 for (let node = list; node; node = node.rest) {
   arr.push(node.value);
 }
 return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
//adds an element to a list
return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  let i = -1;
  for (let node = list; node; node = node.rest) {
    i++;
    if ( i === num) {
      return node.value;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
